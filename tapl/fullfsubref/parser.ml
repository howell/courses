type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | ERROR of (Support.Error.info)
  | TRY of (Support.Error.info)
  | OTHERWISE of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | LEQ of (Support.Error.info)
  | ALL of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 88 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* BOOL *);
  267 (* TBOT *);
  268 (* LET *);
  269 (* IN *);
  270 (* FIX *);
  271 (* LETREC *);
  272 (* CASE *);
  273 (* OF *);
  274 (* AS *);
  275 (* USTRING *);
  276 (* UNIT *);
  277 (* REF *);
  278 (* UUNIT *);
  279 (* RREF *);
  280 (* ERROR *);
  281 (* TRY *);
  282 (* OTHERWISE *);
  283 (* TIMESFLOAT *);
  284 (* SUCC *);
  285 (* PRED *);
  286 (* ISZERO *);
  287 (* UFLOAT *);
  288 (* LEQ *);
  289 (* ALL *);
  290 (* SSOURCE *);
  291 (* SSINK *);
  292 (* NAT *);
  293 (* UCID *);
  294 (* LCID *);
  295 (* INTV *);
  296 (* FLOATV *);
  297 (* STRINGV *);
  298 (* APOSTROPHE *);
  299 (* DQUOTE *);
  300 (* ARROW *);
  301 (* BANG *);
  302 (* BARGT *);
  303 (* BARRCURLY *);
  304 (* BARRSQUARE *);
  305 (* COLON *);
  306 (* COLONCOLON *);
  307 (* COLONEQ *);
  308 (* COLONHASH *);
  309 (* COMMA *);
  310 (* DARROW *);
  311 (* DDARROW *);
  312 (* DOT *);
    0 (* EOF *);
  313 (* EQ *);
  314 (* EQEQ *);
  315 (* EXISTS *);
  316 (* GT *);
  317 (* HASH *);
  318 (* LCURLY *);
  319 (* LCURLYBAR *);
  320 (* LEFTARROW *);
  321 (* LPAREN *);
  322 (* LSQUARE *);
  323 (* LSQUAREBAR *);
  324 (* LT *);
  325 (* RCURLY *);
  326 (* RPAREN *);
  327 (* RSQUARE *);
  328 (* SEMI *);
  329 (* SLASH *);
  330 (* STAR *);
  331 (* TRIANGLE *);
  332 (* USCORE *);
  333 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\005\000\005\000\006\000\
\006\000\006\000\006\000\006\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\004\000\
\004\000\004\000\007\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\013\000\013\000\013\000\010\000\010\000\015\000\015\000\
\016\000\016\000\014\000\014\000\018\000\018\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\019\000\019\000\020\000\020\000\021\000\021\000\
\012\000\012\000\022\000\009\000\009\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\002\000\002\000\001\000\
\002\000\005\000\002\000\002\000\003\000\001\000\001\000\001\000\
\001\000\003\000\003\000\001\000\001\000\001\000\001\000\000\000\
\002\000\002\000\003\000\001\000\001\000\006\000\006\000\006\000\
\006\000\006\000\008\000\004\000\003\000\004\000\005\000\001\000\
\002\000\002\000\002\000\002\000\003\000\002\000\002\000\002\000\
\004\000\003\000\003\000\001\000\000\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\001\000\003\000\003\000\004\000\
\001\000\001\000\001\000\003\000\007\000\001\000\001\000\001\000\
\001\000\001\000\000\000\001\000\001\000\003\000\003\000\001\000\
\001\000\003\000\007\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\067\000\000\000\
\000\000\000\000\000\000\071\000\000\000\072\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\074\000\073\000\070\000\
\000\000\001\000\000\000\000\000\000\000\086\000\000\000\003\000\
\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\005\000\000\000\000\000\080\000\000\000\076\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\017\000\020\000\021\000\000\000\
\022\000\000\000\000\000\000\000\023\000\014\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\026\000\006\000\007\000\000\000\068\000\000\000\000\000\063\000\
\000\000\002\000\000\000\000\000\050\000\051\000\059\000\009\000\
\000\000\011\000\012\000\000\000\058\000\000\000\054\000\000\000\
\000\000\000\000\064\000\000\000\085\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\038\000\
\079\000\078\000\062\000\000\000\049\000\000\000\000\000\018\000\
\000\000\013\000\019\000\027\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\056\000\030\000\031\000\032\000\033\000\034\000\000\000\000\000\
\082\000\000\000\010\000\000\000\000\000\069\000\035\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\030\000\031\000\032\000\056\000\059\000\125\000\091\000\092\000\
\094\000\126\000\033\000\142\000\034\000\035\000\127\000\128\000\
\036\000\067\000\063\000\064\000\065\000\143\000"

let yysindex = "\014\000\
\001\000\000\000\209\254\224\254\044\003\000\000\000\000\220\254\
\241\003\238\254\044\003\000\000\241\003\000\000\044\003\241\003\
\241\003\241\003\241\003\237\254\225\254\000\000\000\000\000\000\
\241\003\000\000\099\003\044\003\240\254\000\000\215\254\000\000\
\224\002\235\254\000\000\007\255\252\003\010\255\246\254\252\254\
\000\000\044\255\253\254\254\254\235\254\004\255\040\255\235\254\
\032\255\179\003\235\254\235\254\235\254\252\003\252\003\000\000\
\252\003\044\003\000\000\235\254\002\255\000\000\247\254\000\000\
\008\255\249\254\248\254\009\255\001\000\145\003\252\003\235\254\
\245\254\252\003\000\000\000\000\000\000\000\000\000\000\032\004\
\000\000\035\255\032\004\032\004\000\000\000\000\183\255\252\003\
\183\255\003\255\000\000\023\255\252\003\013\255\252\003\252\003\
\044\003\044\003\044\003\252\003\016\255\044\003\235\254\000\000\
\000\000\000\000\000\000\044\003\000\000\099\003\044\003\000\000\
\044\003\000\000\192\003\005\255\000\000\000\000\000\000\000\000\
\010\255\000\000\000\000\028\255\000\000\017\255\000\000\025\255\
\015\255\027\255\000\000\032\004\000\000\044\003\037\255\038\255\
\089\255\084\255\085\255\056\255\077\255\000\000\043\255\000\000\
\000\000\000\000\000\000\061\255\000\000\067\255\252\003\000\000\
\183\255\000\000\000\000\000\000\000\000\044\003\044\003\044\003\
\044\003\044\003\044\003\068\255\016\255\106\255\252\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\116\255\092\255\
\000\000\252\003\000\000\044\003\072\255\000\000\000\000\076\255\
\145\003\192\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\255\071\255\000\000\000\000\000\000\
\000\000\000\000\069\255\000\000\000\000\000\000\000\000\000\000\
\075\255\113\000\000\000\041\000\000\000\090\255\000\000\000\000\
\000\000\000\000\000\000\000\000\185\000\000\000\000\000\001\001\
\000\000\000\000\073\001\145\001\217\001\000\000\000\000\000\000\
\000\000\000\000\000\000\033\002\232\002\000\000\000\000\000\000\
\079\255\080\255\000\000\000\000\000\000\000\000\000\000\105\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\082\255\000\000\
\081\255\000\000\000\000\172\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\177\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\090\255\000\000\000\000\000\000\000\000\000\000\000\000\210\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\150\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\255"

let yygindex = "\000\000\
\080\000\000\000\006\000\000\000\000\000\231\255\020\000\224\255\
\033\000\066\000\189\255\248\255\247\255\000\000\003\000\000\000\
\000\000\047\000\000\000\049\000\000\000\000\000"

let yytablesize = 1380
let yytable = "\045\000\
\026\000\043\000\115\000\048\000\038\000\039\000\050\000\051\000\
\052\000\053\000\042\000\090\000\054\000\055\000\001\000\060\000\
\047\000\057\000\037\000\046\000\049\000\068\000\055\000\072\000\
\074\000\058\000\117\000\118\000\104\000\105\000\069\000\106\000\
\062\000\066\000\073\000\083\000\083\000\055\000\095\000\044\000\
\103\000\093\000\083\000\040\000\096\000\116\000\083\000\120\000\
\119\000\097\000\122\000\123\000\100\000\098\000\099\000\083\000\
\101\000\102\000\108\000\109\000\110\000\112\000\129\000\107\000\
\111\000\113\000\132\000\133\000\134\000\135\000\136\000\121\000\
\065\000\131\000\140\000\149\000\151\000\153\000\065\000\065\000\
\029\000\029\000\083\000\141\000\154\000\152\000\155\000\029\000\
\065\000\083\000\065\000\029\000\158\000\159\000\065\000\160\000\
\161\000\162\000\083\000\083\000\029\000\083\000\137\000\138\000\
\139\000\072\000\083\000\144\000\065\000\065\000\065\000\065\000\
\163\000\145\000\164\000\062\000\066\000\186\000\148\000\165\000\
\166\000\065\000\167\000\178\000\176\000\168\000\065\000\029\000\
\180\000\181\000\185\000\184\000\065\000\024\000\029\000\065\000\
\065\000\075\000\065\000\157\000\053\000\179\000\065\000\029\000\
\029\000\084\000\029\000\077\000\114\000\061\000\053\000\156\000\
\182\000\150\000\130\000\169\000\177\000\147\000\146\000\000\000\
\000\000\000\000\000\000\170\000\171\000\172\000\173\000\174\000\
\175\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\072\000\028\000\028\000\028\000\028\000\000\000\000\000\000\000\
\028\000\183\000\075\000\000\000\028\000\028\000\000\000\028\000\
\076\000\077\000\000\000\028\000\000\000\028\000\000\000\000\000\
\000\000\078\000\000\000\000\000\079\000\080\000\000\000\000\000\
\000\000\028\000\028\000\028\000\028\000\081\000\000\000\082\000\
\083\000\084\000\085\000\086\000\124\000\000\000\028\000\000\000\
\028\000\000\000\000\000\028\000\028\000\000\000\000\000\028\000\
\000\000\028\000\000\000\000\000\028\000\028\000\000\000\028\000\
\028\000\028\000\028\000\028\000\087\000\000\000\000\000\088\000\
\028\000\000\000\089\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\005\000\000\000\000\000\
\006\000\007\000\000\000\000\000\008\000\000\000\009\000\010\000\
\011\000\000\000\000\000\000\000\012\000\013\000\000\000\000\000\
\014\000\015\000\000\000\016\000\017\000\018\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\021\000\022\000\
\023\000\024\000\060\000\000\000\000\000\025\000\060\000\060\000\
\060\000\060\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\060\000\000\000\000\000\060\000\000\000\027\000\000\000\
\060\000\028\000\060\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\060\000\
\060\000\060\000\000\000\037\000\037\000\000\000\000\000\000\000\
\000\000\000\000\037\000\060\000\000\000\060\000\037\000\000\000\
\060\000\000\000\000\000\000\000\060\000\000\000\060\000\037\000\
\000\000\060\000\060\000\000\000\060\000\060\000\060\000\000\000\
\060\000\000\000\040\000\000\000\000\000\060\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\040\000\037\000\000\000\040\000\000\000\000\000\000\000\
\040\000\037\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\037\000\000\000\037\000\040\000\040\000\
\040\000\040\000\000\000\081\000\081\000\000\000\000\000\000\000\
\000\000\000\000\081\000\040\000\000\000\040\000\081\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\040\000\081\000\
\000\000\040\000\040\000\000\000\040\000\040\000\040\000\000\000\
\040\000\000\000\042\000\000\000\000\000\040\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\042\000\081\000\000\000\042\000\000\000\000\000\000\000\
\042\000\081\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\081\000\000\000\081\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\042\000\000\000\
\000\000\042\000\042\000\000\000\042\000\042\000\042\000\000\000\
\042\000\000\000\043\000\000\000\000\000\042\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\043\000\000\000\000\000\
\000\000\043\000\000\000\000\000\043\000\000\000\000\000\000\000\
\043\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\043\000\000\000\
\000\000\043\000\043\000\000\000\043\000\043\000\043\000\000\000\
\043\000\000\000\046\000\000\000\000\000\043\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\046\000\000\000\000\000\046\000\000\000\000\000\000\000\
\046\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\000\000\046\000\000\000\
\000\000\046\000\046\000\000\000\046\000\046\000\046\000\000\000\
\046\000\000\000\047\000\000\000\000\000\046\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\047\000\000\000\000\000\047\000\000\000\000\000\000\000\
\047\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\047\000\000\000\
\000\000\047\000\047\000\000\000\047\000\047\000\047\000\000\000\
\047\000\000\000\048\000\000\000\000\000\047\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\048\000\000\000\000\000\048\000\000\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\048\000\000\000\
\000\000\048\000\048\000\000\000\048\000\048\000\048\000\000\000\
\048\000\000\000\044\000\000\000\000\000\048\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\044\000\000\000\000\000\044\000\000\000\000\000\000\000\
\044\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\044\000\000\000\
\000\000\044\000\044\000\000\000\044\000\044\000\044\000\000\000\
\044\000\000\000\041\000\000\000\000\000\044\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\041\000\000\000\000\000\041\000\000\000\000\000\000\000\
\041\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\041\000\000\000\
\000\000\041\000\041\000\000\000\041\000\041\000\041\000\000\000\
\041\000\000\000\045\000\000\000\000\000\041\000\045\000\045\000\
\045\000\045\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\045\000\000\000\000\000\045\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\045\000\000\000\045\000\000\000\006\000\
\007\000\065\000\000\000\000\000\045\000\000\000\045\000\065\000\
\065\000\045\000\045\000\012\000\045\000\045\000\045\000\014\000\
\045\000\065\000\000\000\065\000\000\000\045\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\041\000\022\000\023\000\
\024\000\000\000\000\000\000\000\000\000\065\000\065\000\065\000\
\065\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\065\000\027\000\000\000\065\000\
\028\000\071\000\000\000\029\000\000\000\065\000\000\000\000\000\
\065\000\065\000\000\000\065\000\065\000\003\000\004\000\000\000\
\005\000\000\000\000\000\006\000\007\000\000\000\000\000\008\000\
\000\000\009\000\010\000\011\000\000\000\000\000\000\000\012\000\
\013\000\000\000\000\000\014\000\015\000\000\000\016\000\017\000\
\018\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\022\000\023\000\024\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\004\000\000\000\005\000\
\000\000\027\000\006\000\007\000\028\000\000\000\008\000\029\000\
\009\000\010\000\011\000\000\000\000\000\000\000\012\000\013\000\
\000\000\000\000\014\000\015\000\000\000\016\000\017\000\018\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\022\000\023\000\024\000\000\000\000\000\000\000\025\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\006\000\007\000\000\000\000\000\000\000\000\000\009\000\000\000\
\027\000\000\000\000\000\028\000\012\000\013\000\029\000\000\000\
\014\000\000\000\000\000\016\000\017\000\018\000\019\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\041\000\022\000\
\023\000\024\000\006\000\007\000\000\000\025\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\012\000\006\000\
\007\000\000\000\014\000\000\000\000\000\000\000\027\000\000\000\
\000\000\028\000\000\000\012\000\029\000\000\000\000\000\014\000\
\041\000\022\000\023\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\022\000\023\000\
\024\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\003\000\028\000\000\000\000\000\029\000\000\000\
\006\000\007\000\000\000\000\000\000\000\027\000\000\000\075\000\
\028\000\071\000\000\000\029\000\012\000\076\000\077\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\079\000\080\000\000\000\000\000\000\000\041\000\022\000\
\023\000\024\000\081\000\000\000\082\000\083\000\084\000\085\000\
\086\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\076\000\077\000\000\000\000\000\000\000\027\000\000\000\
\000\000\028\000\078\000\000\000\029\000\079\000\000\000\000\000\
\000\000\087\000\000\000\000\000\088\000\000\000\081\000\089\000\
\000\000\000\000\000\000\085\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\087\000\000\000\000\000\
\088\000\000\000\000\000\089\000"

let yycheck = "\009\000\
\000\000\038\001\070\000\013\000\037\001\038\001\016\000\017\000\
\018\000\019\000\005\000\037\000\032\001\060\001\001\000\025\000\
\011\000\049\001\066\001\038\001\015\000\038\001\069\001\033\000\
\018\001\057\001\038\001\039\001\054\000\055\000\072\001\057\000\
\027\000\028\000\056\001\006\001\007\001\057\001\049\001\076\001\
\050\000\032\001\013\001\076\001\049\001\071\000\017\001\080\000\
\074\000\006\001\083\000\084\000\049\001\057\001\057\001\026\001\
\017\001\026\001\057\001\069\001\053\001\070\001\088\000\058\000\
\072\001\057\001\044\001\093\000\056\001\095\000\096\000\037\001\
\002\001\071\001\100\000\071\001\049\001\053\001\008\001\009\001\
\006\001\007\001\053\001\068\001\070\001\069\001\060\001\013\001\
\018\001\060\001\020\001\017\001\056\001\056\001\024\001\007\001\
\013\001\013\001\069\001\070\001\026\001\072\001\097\000\098\000\
\099\000\115\000\077\001\102\000\038\001\039\001\040\001\041\001\
\057\001\108\000\038\001\110\000\111\000\185\000\113\000\077\001\
\060\001\051\001\056\001\018\001\057\001\151\000\056\001\053\001\
\013\001\038\001\055\001\060\001\062\001\072\001\060\001\065\001\
\066\001\069\001\068\001\134\000\060\001\167\000\072\001\069\001\
\070\001\056\001\072\001\069\001\069\000\070\001\069\001\132\000\
\178\000\121\000\089\000\153\000\165\000\111\000\110\000\255\255\
\255\255\255\255\255\255\158\000\159\000\160\000\161\000\162\000\
\163\000\255\255\255\255\255\255\255\255\002\001\255\255\255\255\
\186\000\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\013\001\180\000\004\001\255\255\017\001\018\001\255\255\020\001\
\010\001\011\001\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\019\001\255\255\255\255\022\001\023\001\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\051\001\255\255\
\053\001\255\255\255\255\056\001\057\001\255\255\255\255\060\001\
\255\255\062\001\255\255\255\255\065\001\066\001\255\255\068\001\
\069\001\070\001\071\001\072\001\062\001\255\255\255\255\065\001\
\077\001\255\255\068\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\012\001\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\002\001\255\255\255\255\045\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\062\001\255\255\
\024\001\065\001\026\001\255\255\068\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\013\001\051\001\255\255\053\001\017\001\255\255\
\056\001\255\255\255\255\255\255\060\001\255\255\062\001\026\001\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\053\001\255\255\020\001\255\255\255\255\255\255\
\024\001\060\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\038\001\039\001\
\040\001\041\001\255\255\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\013\001\051\001\255\255\053\001\017\001\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\026\001\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\053\001\255\255\020\001\255\255\255\255\255\255\
\024\001\060\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\069\001\070\001\255\255\072\001\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\062\001\255\255\
\255\255\065\001\066\001\255\255\068\001\069\001\070\001\255\255\
\072\001\255\255\002\001\255\255\255\255\077\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\051\001\255\255\053\001\255\255\008\001\
\009\001\002\001\255\255\255\255\060\001\255\255\062\001\008\001\
\009\001\065\001\066\001\020\001\068\001\069\001\070\001\024\001\
\072\001\018\001\255\255\020\001\255\255\077\001\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\255\255\053\001\062\001\255\255\056\001\
\065\001\066\001\255\255\068\001\255\255\062\001\255\255\255\255\
\065\001\066\001\255\255\068\001\069\001\002\001\003\001\255\255\
\005\001\255\255\255\255\008\001\009\001\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\255\255\255\255\255\255\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\255\255\005\001\
\255\255\062\001\008\001\009\001\065\001\255\255\012\001\068\001\
\014\001\015\001\016\001\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\024\001\025\001\255\255\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\045\001\
\255\255\255\255\002\001\255\255\255\255\255\255\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\014\001\255\255\
\062\001\255\255\255\255\065\001\020\001\021\001\068\001\255\255\
\024\001\255\255\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\038\001\039\001\
\040\001\041\001\008\001\009\001\255\255\045\001\255\255\255\255\
\255\255\002\001\255\255\255\255\255\255\255\255\020\001\008\001\
\009\001\255\255\024\001\255\255\255\255\255\255\062\001\255\255\
\255\255\065\001\255\255\020\001\068\001\255\255\255\255\024\001\
\038\001\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\255\255\056\001\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\002\001\065\001\255\255\255\255\068\001\255\255\
\008\001\009\001\255\255\255\255\255\255\062\001\255\255\004\001\
\065\001\066\001\255\255\068\001\020\001\010\001\011\001\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\022\001\023\001\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\004\001\255\255\255\255\255\255\255\255\
\255\255\010\001\011\001\255\255\255\255\255\255\062\001\255\255\
\255\255\065\001\019\001\255\255\068\001\022\001\255\255\255\255\
\255\255\062\001\255\255\255\255\065\001\255\255\031\001\068\001\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\255\255\
\065\001\255\255\255\255\068\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  TTOP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TBOT\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  CASE\000\
  OF\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  ERROR\000\
  TRY\000\
  OTHERWISE\000\
  TIMESFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  UFLOAT\000\
  LEQ\000\
  ALL\000\
  SSOURCE\000\
  SSINK\000\
  NAT\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 135 "parser.mly"
      ( fun ctx -> [],ctx )
# 729 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 137 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 741 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 145 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 748 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 147 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 756 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 149 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 764 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 154 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 772 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 156 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 780 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 161 "parser.mly"
                ( _1 )
# 787 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 163 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 795 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OType) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 165 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TyAll(_2.v,_3 ctx,_5 ctx1) )
# 808 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 169 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 816 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 171 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 824 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 176 "parser.mly"
           ( _2 )
# 833 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 178 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 844 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 184 "parser.mly"
      ( fun ctx -> TyTop )
# 851 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 186 "parser.mly"
      ( fun ctx -> TyBool )
# 858 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 188 "parser.mly"
      ( fun ctx -> TyBot )
# 865 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 190 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 875 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 193 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 885 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 196 "parser.mly"
      ( fun ctx -> TyString )
# 892 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 198 "parser.mly"
      ( fun ctx -> TyUnit )
# 899 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 200 "parser.mly"
      ( fun ctx -> TyFloat )
# 906 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 202 "parser.mly"
      ( fun ctx -> TyNat )
# 913 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "parser.mly"
      ( fun ctx -> TyVarBind(TyTop) )
# 919 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 208 "parser.mly"
      ( fun ctx -> TyVarBind(_2 ctx) )
# 927 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 210 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 935 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 216 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 944 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 218 "parser.mly"
            ( _1 )
# 951 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 222 "parser.mly"
      ( _1 )
# 958 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 224 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 972 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 228 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 986 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 232 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 998 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 234 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 1010 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 236 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1022 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 238 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1039 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 243 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 1050 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 246 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 1059 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx -> TmTry(_1, _2 ctx, _4 ctx) )
# 1069 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OType) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 250 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmTAbs(_1,_2.v,_3 ctx,_5 ctx1) )
# 1082 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 256 "parser.mly"
      ( _1 )
# 1089 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 258 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1100 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 263 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1109 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 266 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1117 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 268 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1125 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 270 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1134 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 272 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1142 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 274 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1150 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 276 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1158 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 278 "parser.mly"
      ( fun ctx ->
          let t1 = _1 ctx in
          let t2 = _3 ctx in
          TmTApp(tmInfo t1,t1,t2) )
# 1171 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1181 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 288 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1191 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 291 "parser.mly"
      ( _1 )
# 1198 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "parser.mly"
      ( fun ctx i -> [] )
# 1204 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 297 "parser.mly"
      ( _1 )
# 1211 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 301 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1218 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1227 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 307 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1236 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 309 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1243 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 313 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1252 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 315 "parser.mly"
      ( _1 )
# 1259 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 319 "parser.mly"
      ( _1 )
# 1266 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 321 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1276 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 327 "parser.mly"
      ( _2 )
# 1285 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 329 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1295 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 331 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1303 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 334 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1310 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 336 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1317 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 338 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1327 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 341 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1341 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 344 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1348 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 346 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1355 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 348 "parser.mly"
      ( fun ctx -> TmError(_1) )
# 1362 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 350 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1369 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 352 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1380 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx i -> [] )
# 1386 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 362 "parser.mly"
      ( _1 )
# 1393 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 366 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1400 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 368 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1409 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 372 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1418 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 374 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1425 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 378 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1432 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 380 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1441 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 384 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1456 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 390 "parser.mly"
      ( fun ctx -> TyTop)
# 1462 "parser.ml"
               : 'OType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 392 "parser.mly"
      ( _2 )
# 1470 "parser.ml"
               : 'OType))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
